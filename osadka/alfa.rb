module Sigma_calculation
	@@alfa_etta_ksi_m = [
	[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
	[0.96, 0.972, 0.975, 0.976, 0.977, 0.977],
	[0.8, 0.848, 0.866, 0.876, 0.879, 0.881],
	[0.606, 0.682, 0.717, 0.739, 0.749, 0.754],
	[0.449, 0.532, 0.578, 0.612, 0.629, 0.639],
	[0.336, 0.414, 0.463, 0.505, 0.53, 0.545],
	[0.257, 0.325, 0.374, 0.419, 0.449, 0.47],
	[0.201, 0.26, 0.304, 0.349, 0.383, 0.41],
	[0.16, 0.21, 0.251, 0.294, 0.329, 0.36],
	[0.131, 0.173, 0.209, 0.25, 0.285, 0.319],
	[0.108, 0.145, 0.176, 0.214, 0.248, 0.285],
	[0.091, 0.123, 0.15, 0.185, 0.218, 0.255],
	[0.077, 0.105, 0.13, 0.161, 0.192, 0.23],
	[0.067, 0.091, 0.113, 0.141, 0.17, 0.208],
	[0.058, 0.079, 0.099, 0.124, 0.152, 0.189],
	[0.051, 0.07, 0.087, 0.11, 0.136, 0.173],
	[0.045, 0.062, 0.077, 0.099, 0.122, 0.158],
	[0.04, 0.055, 0.069, 0.088, 0.11, 0.145],
	[0.036, 0.049, 0.062, 0.08, 0.1, 0.133],
	[0.032, 0.044, 0.056, 0.072, 0.091, 0.123],
	[0.029, 0.04, 0.051, 0.066, 0.084, 0.113],
	[0.026, 0.037, 0.046, 0.06, 0.077, 0.105],
	[0.024, 0.033, 0.042, 0.055, 0.071, 0.098],
	[0.022, 0.031, 0.039, 0.051, 0.065, 0.091],
	[0.02, 0.028, 0.036, 0.047, 0.06, 0.085],
	[0.019, 0.026, 0.033, 0.043, 0.056, 0.079],
	[0.017, 0.024, 0.031, 0.04, 0.052, 0.074],
	[0.016, 0.022, 0.029, 0.037, 0.049, 0.069],
	[0.015, 0.021, 0.027, 0.035, 0.045, 0.065],
	[0.014, 0.02, 0.025, 0.033, 0.042, 0.061],
	[0.013, 0.018, 0.023, 0.031, 0.04, 0.058]]
	@@ksi_m = [0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6, 4.0, 4.4, 4.8, 5.2, 5.6, 6.0, 6.4, 6.8, 7.2, 7.6, 8.0, 8.4, 8.8, 9.2, 9.6, 10.0, 10.4, 10.8, 11.2, 11.6, 12.0]
	@@etta_m = [1.0, 1.4, 1.8, 2.4, 3.2, 5]
	# напряжения вычисляются на координате z2 (нижняя граница слоя)
	def s_zpi_method(p, b, etta)
		ksi = 2*@z2/b
		if ksi > 12 then ksi = 12; puts "warning, in z = #{@z2}, ksi > 12 (#{2*@z2/b})" end
		i = Interpolation.new
		#puts @@alfa_etta_ksi_m
		a = i.int2d(@@alfa_etta_ksi_m, @@etta_m, @@ksi_m, etta, ksi)
		@s_zpi = a * p
	end
	def s_z_gamma_i(zg0, bk, etta_k)
		ksi_k = 2*@z2/bk
		if ksi_k > 12 then ksi_k = 12; puts "warning, in z = #{@z2}, ksi_k > 12 (#{2*@z2/bk})" end
		i = Interpolation.new
		a = i.int2d(@@alfa_etta_ksi_m, @@etta_m, @@ksi_m, etta_k, ksi_k)
		@s_zgi = a * zg0
	end
	def s_gi(prevWaterPress, prev_σzg) # ну и как насчет юникода?
		if (@w == "yes") or (@w == "Yes") or (@w == "YES") or (@w == "y") or (@w == "Y") then
			@u = prevWaterPress + @h
			γw = 1
			γsb = (@gamma_s - γw) / (1 + @e_por)
			@σzg = prev_σzg + γsb * @h - @u
		else
			# текущее давление воды остается нулем, как и было
			@σzg = prev_σzg + @gamma * @h
		end
		#ρw = 1 # плотность воды
		#g = 10 #ускорение силы тяжести, м/сек2
		#u = ρw * g * z_wi
		# z_wi - глубина залегания уровня i–го слоя грунта от положения уровня грунтовых вод
		[@σzg, @u]
	end
end